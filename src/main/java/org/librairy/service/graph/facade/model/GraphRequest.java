/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.librairy.service.graph.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GraphRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GraphRequest\",\"namespace\":\"org.librairy.service.graph.facade.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"order\":\"ignore\"},{\"name\":\"nodes\",\"type\":{\"type\":\"record\",\"name\":\"Query\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"filter\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"order\":\"ignore\"},{\"name\":\"fields\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[],\"order\":\"ignore\"}]},\"order\":\"ignore\"},{\"name\":\"edges\",\"type\":\"Query\",\"order\":\"ignore\"},{\"name\":\"format\",\"type\":{\"type\":\"enum\",\"name\":\"Format\",\"symbols\":[\"CSV\",\"JSONL\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String id;
   private java.lang.String description;
   private org.librairy.service.graph.facade.model.Query nodes;
   private org.librairy.service.graph.facade.model.Query edges;
   private org.librairy.service.graph.facade.model.Format format;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GraphRequest() {}

  /**
   * All-args constructor.
   */
  public GraphRequest(java.lang.String id, java.lang.String description, org.librairy.service.graph.facade.model.Query nodes, org.librairy.service.graph.facade.model.Query edges, org.librairy.service.graph.facade.model.Format format) {
    this.id = id;
    this.description = description;
    this.nodes = nodes;
    this.edges = edges;
    this.format = format;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return description;
    case 2: return nodes;
    case 3: return edges;
    case 4: return format;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: description = (java.lang.String)value$; break;
    case 2: nodes = (org.librairy.service.graph.facade.model.Query)value$; break;
    case 3: edges = (org.librairy.service.graph.facade.model.Query)value$; break;
    case 4: format = (org.librairy.service.graph.facade.model.Format)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'nodes' field.
   */
  public org.librairy.service.graph.facade.model.Query getNodes() {
    return nodes;
  }

  /**
   * Sets the value of the 'nodes' field.
   * @param value the value to set.
   */
  public void setNodes(org.librairy.service.graph.facade.model.Query value) {
    this.nodes = value;
  }

  /**
   * Gets the value of the 'edges' field.
   */
  public org.librairy.service.graph.facade.model.Query getEdges() {
    return edges;
  }

  /**
   * Sets the value of the 'edges' field.
   * @param value the value to set.
   */
  public void setEdges(org.librairy.service.graph.facade.model.Query value) {
    this.edges = value;
  }

  /**
   * Gets the value of the 'format' field.
   */
  public org.librairy.service.graph.facade.model.Format getFormat() {
    return format;
  }

  /**
   * Sets the value of the 'format' field.
   * @param value the value to set.
   */
  public void setFormat(org.librairy.service.graph.facade.model.Format value) {
    this.format = value;
  }

  /** Creates a new GraphRequest RecordBuilder */
  public static org.librairy.service.graph.facade.model.GraphRequest.Builder newBuilder() {
    return new org.librairy.service.graph.facade.model.GraphRequest.Builder();
  }
  
  /** Creates a new GraphRequest RecordBuilder by copying an existing Builder */
  public static org.librairy.service.graph.facade.model.GraphRequest.Builder newBuilder(org.librairy.service.graph.facade.model.GraphRequest.Builder other) {
    return new org.librairy.service.graph.facade.model.GraphRequest.Builder(other);
  }
  
  /** Creates a new GraphRequest RecordBuilder by copying an existing GraphRequest instance */
  public static org.librairy.service.graph.facade.model.GraphRequest.Builder newBuilder(org.librairy.service.graph.facade.model.GraphRequest other) {
    return new org.librairy.service.graph.facade.model.GraphRequest.Builder(other);
  }
  
  /**
   * RecordBuilder for GraphRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GraphRequest>
    implements org.apache.avro.data.RecordBuilder<GraphRequest> {

    private java.lang.String id;
    private java.lang.String description;
    private org.librairy.service.graph.facade.model.Query nodes;
    private org.librairy.service.graph.facade.model.Query edges;
    private org.librairy.service.graph.facade.model.Format format;

    /** Creates a new Builder */
    private Builder() {
      super(org.librairy.service.graph.facade.model.GraphRequest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.librairy.service.graph.facade.model.GraphRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nodes)) {
        this.nodes = data().deepCopy(fields()[2].schema(), other.nodes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.edges)) {
        this.edges = data().deepCopy(fields()[3].schema(), other.edges);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.format)) {
        this.format = data().deepCopy(fields()[4].schema(), other.format);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GraphRequest instance */
    private Builder(org.librairy.service.graph.facade.model.GraphRequest other) {
            super(org.librairy.service.graph.facade.model.GraphRequest.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nodes)) {
        this.nodes = data().deepCopy(fields()[2].schema(), other.nodes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.edges)) {
        this.edges = data().deepCopy(fields()[3].schema(), other.edges);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.format)) {
        this.format = data().deepCopy(fields()[4].schema(), other.format);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder setDescription(java.lang.String value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'description' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'nodes' field */
    public org.librairy.service.graph.facade.model.Query getNodes() {
      return nodes;
    }
    
    /** Sets the value of the 'nodes' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder setNodes(org.librairy.service.graph.facade.model.Query value) {
      validate(fields()[2], value);
      this.nodes = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'nodes' field has been set */
    public boolean hasNodes() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'nodes' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder clearNodes() {
      nodes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'edges' field */
    public org.librairy.service.graph.facade.model.Query getEdges() {
      return edges;
    }
    
    /** Sets the value of the 'edges' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder setEdges(org.librairy.service.graph.facade.model.Query value) {
      validate(fields()[3], value);
      this.edges = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'edges' field has been set */
    public boolean hasEdges() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'edges' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder clearEdges() {
      edges = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'format' field */
    public org.librairy.service.graph.facade.model.Format getFormat() {
      return format;
    }
    
    /** Sets the value of the 'format' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder setFormat(org.librairy.service.graph.facade.model.Format value) {
      validate(fields()[4], value);
      this.format = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'format' field has been set */
    public boolean hasFormat() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'format' field */
    public org.librairy.service.graph.facade.model.GraphRequest.Builder clearFormat() {
      format = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public GraphRequest build() {
      try {
        GraphRequest record = new GraphRequest();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.String) defaultValue(fields()[1]);
        record.nodes = fieldSetFlags()[2] ? this.nodes : (org.librairy.service.graph.facade.model.Query) defaultValue(fields()[2]);
        record.edges = fieldSetFlags()[3] ? this.edges : (org.librairy.service.graph.facade.model.Query) defaultValue(fields()[3]);
        record.format = fieldSetFlags()[4] ? this.format : (org.librairy.service.graph.facade.model.Format) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
