/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.librairy.service.graph.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GraphSummary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GraphSummary\",\"namespace\":\"org.librairy.service.graph.facade.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"order\":\"ignore\"},{\"name\":\"date\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"order\":\"ignore\"},{\"name\":\"size\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"order\":\"ignore\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String id;
   private java.lang.String description;
   private java.lang.String date;
   private java.lang.String size;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GraphSummary() {}

  /**
   * All-args constructor.
   */
  public GraphSummary(java.lang.String id, java.lang.String description, java.lang.String date, java.lang.String size) {
    this.id = id;
    this.description = description;
    this.date = date;
    this.size = size;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return description;
    case 2: return date;
    case 3: return size;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: description = (java.lang.String)value$; break;
    case 2: date = (java.lang.String)value$; break;
    case 3: size = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'size' field.
   */
  public java.lang.String getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(java.lang.String value) {
    this.size = value;
  }

  /** Creates a new GraphSummary RecordBuilder */
  public static org.librairy.service.graph.facade.model.GraphSummary.Builder newBuilder() {
    return new org.librairy.service.graph.facade.model.GraphSummary.Builder();
  }
  
  /** Creates a new GraphSummary RecordBuilder by copying an existing Builder */
  public static org.librairy.service.graph.facade.model.GraphSummary.Builder newBuilder(org.librairy.service.graph.facade.model.GraphSummary.Builder other) {
    return new org.librairy.service.graph.facade.model.GraphSummary.Builder(other);
  }
  
  /** Creates a new GraphSummary RecordBuilder by copying an existing GraphSummary instance */
  public static org.librairy.service.graph.facade.model.GraphSummary.Builder newBuilder(org.librairy.service.graph.facade.model.GraphSummary other) {
    return new org.librairy.service.graph.facade.model.GraphSummary.Builder(other);
  }
  
  /**
   * RecordBuilder for GraphSummary instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GraphSummary>
    implements org.apache.avro.data.RecordBuilder<GraphSummary> {

    private java.lang.String id;
    private java.lang.String description;
    private java.lang.String date;
    private java.lang.String size;

    /** Creates a new Builder */
    private Builder() {
      super(org.librairy.service.graph.facade.model.GraphSummary.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.librairy.service.graph.facade.model.GraphSummary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.size)) {
        this.size = data().deepCopy(fields()[3].schema(), other.size);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GraphSummary instance */
    private Builder(org.librairy.service.graph.facade.model.GraphSummary other) {
            super(org.librairy.service.graph.facade.model.GraphSummary.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.size)) {
        this.size = data().deepCopy(fields()[3].schema(), other.size);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.librairy.service.graph.facade.model.GraphSummary.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.librairy.service.graph.facade.model.GraphSummary.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.librairy.service.graph.facade.model.GraphSummary.Builder setDescription(java.lang.String value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'description' field */
    public org.librairy.service.graph.facade.model.GraphSummary.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'date' field */
    public java.lang.String getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public org.librairy.service.graph.facade.model.GraphSummary.Builder setDate(java.lang.String value) {
      validate(fields()[2], value);
      this.date = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'date' field */
    public org.librairy.service.graph.facade.model.GraphSummary.Builder clearDate() {
      date = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'size' field */
    public java.lang.String getSize() {
      return size;
    }
    
    /** Sets the value of the 'size' field */
    public org.librairy.service.graph.facade.model.GraphSummary.Builder setSize(java.lang.String value) {
      validate(fields()[3], value);
      this.size = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'size' field has been set */
    public boolean hasSize() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'size' field */
    public org.librairy.service.graph.facade.model.GraphSummary.Builder clearSize() {
      size = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GraphSummary build() {
      try {
        GraphSummary record = new GraphSummary();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.String) defaultValue(fields()[1]);
        record.date = fieldSetFlags()[2] ? this.date : (java.lang.String) defaultValue(fields()[2]);
        record.size = fieldSetFlags()[3] ? this.size : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
